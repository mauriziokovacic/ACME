from ACME.utility.FloatTensor import *


def _black():
    return FloatTensor([
            [0.000000,0.0000000.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _r():
    return FloatTensor([
            [1.000000,0.0000000.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _g():
    return FloatTensor([
            [0.000000,1.0000000.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _b():
    return FloatTensor([
            [0.000000,0.0000001.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _c():
    return FloatTensor([
            [0.000000,1.0000001.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _m():
    return FloatTensor([
            [1.000000,0.0000001.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _y():
    return FloatTensor([
            [1.000000,1.0000000.000000,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _fire():
    return FloatTensor([
            [0.533333,0.0000000.082353,],
            [0.929412,0.1098040.141176,],
            [1.000000,0.4980390.152941,],
            [1.000000,0.7882350.054902,],
            [1.000000,0.9490200.000000,],
            [0.937255,0.8941180.690196,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _brown():
    return FloatTensor([
            [0.498039,0.3019610.243137,],
            [0.721569,0.4862750.298039,],
            [0.886275,0.7137250.349020,],
            [0.976471,0.9725490.443137,],
        ],device='cpu')



def _orange():
    return FloatTensor([
            [0.600000,0.2039220.015686,],
            [0.850980,0.3725490.054902,],
            [0.996078,0.6000000.160784,],
            [0.996078,0.8509800.556863,],
            [1.000000,1.0000000.831373,],
        ],device='cpu')



def _blue():
    return FloatTensor([
            [0.015686,0.2039220.600000,],
            [0.054902,0.3725490.850980,],
            [0.160784,0.6000000.996078,],
            [0.556863,0.8509800.996078,],
            [0.831373,1.0000001.000000,],
        ],device='cpu')



def _green():
    return FloatTensor([
            [0.000000,0.4078430.215686,],
            [0.192157,0.6392160.329412,],
            [0.470588,0.7764710.474510,],
            [0.760784,0.9019610.600000,],
            [1.000000,1.0000000.800000,],
        ],device='cpu')



def _mint():
    return FloatTensor([
            [0.039216,0.2196080.168627,],
            [0.094118,0.2862750.196078,],
            [0.192157,0.5568630.286275,],
            [0.400000,0.7686270.337255,],
            [0.643137,0.9882350.807843,],
        ],device='cpu')



def _purple():
    return FloatTensor([
            [0.505882,0.0588240.486275,],
            [0.533333,0.3372550.654902,],
            [0.549020,0.5882350.776471,],
            [0.701961,0.8039220.890196,],
            [0.929412,0.9725490.984314,],
        ],device='cpu')



def _sign():
    return FloatTensor([
            [0.019608,0.4431370.690196,],
            [0.572549,0.7725490.870588,],
            [0.968627,0.9686270.968627,],
            [0.956863,0.6470590.509804,],
            [0.792157,0.0000000.125490,],
        ],device='cpu')



def _king():
    return FloatTensor([
            [0.101961,0.1647060.423529,],
            [0.698039,0.1215690.121569,],
            [0.992157,0.7333330.176471,],
        ],device='cpu')



def _vision():
    return FloatTensor([
            [0.000000,0.0000000.274510,],
            [0.109804,0.7098040.878431,],
        ],device='cpu')



def _turbo():
    return FloatTensor([
            [0.074510,0.3137250.345098,],
            [0.945098,0.9490200.709804,],
        ],device='cpu')



def _pinot():
    return FloatTensor([
            [0.094118,0.1568630.282353,],
            [0.294118,0.4235290.717647,],
        ],device='cpu')



def _sky():
    return FloatTensor([
            [0.027451,0.3960780.521569,],
            [1.000000,1.0000001.000000,],
        ],device='cpu')



def _aqua():
    return FloatTensor([
            [0.074510,0.3294120.478431,],
            [0.501961,0.8156860.780392,],
        ],device='cpu')



def _dusk():
    return FloatTensor([
            [0.098039,0.3294120.482353,],
            [1.000000,0.8470590.607843,],
        ],device='cpu')



def _relay():
    return FloatTensor([
            [0.227451,0.1098040.443137,],
            [0.843137,0.4274510.466667,],
            [1.000000,0.6862750.482353,],
        ],device='cpu')



def _sweet():
    return FloatTensor([
            [0.247059,0.3176470.694118,],
            [0.352941,0.3333330.682353,],
            [0.482353,0.3725490.674510,],
            [0.560784,0.4156860.682353,],
            [0.658824,0.4156860.643137,],
            [0.800000,0.4196080.556863,],
            [0.945098,0.5098040.443137,],
            [0.952941,0.6431370.411765,],
            [0.968627,0.7882350.470588,],
        ],device='cpu')



def _phoenix():
    return FloatTensor([
            [0.972549,0.2117650.000000,],
            [0.976471,0.8313730.137255,],
        ],device='cpu')



def _RYB():
    return FloatTensor([
            [0.996078,0.1529410.070588,],
            [0.988235,0.3764710.039216,],
            [0.984314,0.6000000.007843,],
            [0.988235,0.8000000.101961,],
            [0.996078,0.9960780.200000,],
            [0.698039,0.8431370.196078,],
            [0.400000,0.6901960.196078,],
            [0.203922,0.4862750.596078,],
            [0.007843,0.2784310.996078,],
            [0.266667,0.1411760.839216,],
            [0.525490,0.0039220.686275,],
            [0.760784,0.0784310.376471,],
        ],device='cpu')



def _scale():
    return FloatTensor([
            [0.000000,0.0000000.000000,],
            [0.498039,0.0000001.000000,],
            [0.000000,0.0000001.000000,],
            [0.000000,1.0000001.000000,],
            [0.000000,1.0000000.000000,],
            [1.000000,1.0000000.000000,],
            [1.000000,0.5019610.000000,],
            [1.000000,0.0000000.000000,],
        ],device='cpu')



def _paint():
    return FloatTensor([
            [0.929412,0.1098040.141176,],
            [1.000000,0.9490200.000000,],
            [0.133333,0.6941180.298039,],
            [0.070588,0.8901960.858824,],
            [0.000000,0.6352940.909804,],
            [0.866667,0.3058820.701961,],
        ],device='cpu')



def _pastel():
    return FloatTensor([
            [0.729412,0.8823531.000000,],
            [0.729412,1.0000000.788235,],
            [1.000000,1.0000000.729412,],
            [1.000000,0.8745100.729412,],
            [1.000000,0.7019610.729412,],
        ],device='cpu')



def _cinolib():
    return FloatTensor([
            [0.992157,0.4078430.462745,],
            [0.992157,0.5294120.337255,],
            [0.996078,0.8980390.615686,],
            [0.776471,0.8745100.713725,],
            [0.301961,0.7568630.776471,],
            [0.713725,0.7843140.901961,],
            [0.486275,0.6196080.984314,],
            [0.988235,0.3490200.580392,],
        ],device='cpu')



def _matlab():
    return FloatTensor([
            [0.000000,0.4470000.741000,],
            [0.850000,0.3250000.098000,],
            [0.929000,0.6940000.125000,],
            [0.494000,0.1840000.556000,],
            [0.466000,0.6740000.188000,],
            [0.301000,0.7450000.933000,],
            [0.635000,0.0780000.184000,],
        ],device='cpu')



def _parula():
    return FloatTensor([
            [0.242200,0.1504000.660300,],
            [0.250390,0.1649950.707614,],
            [0.257771,0.1817810.751138,],
            [0.264729,0.1977570.795214,],
            [0.270648,0.2146760.836371,],
            [0.275114,0.2342380.870986,],
            [0.278300,0.2558710.899071,],
            [0.280333,0.2782330.922100,],
            [0.281338,0.3005950.941376,],
            [0.281014,0.3227570.957886,],
            [0.279467,0.3446710.971676,],
            [0.275971,0.3666810.982905,],
            [0.269914,0.3892000.990600,],
            [0.260243,0.4123290.995157,],
            [0.244033,0.4358330.998833,],
            [0.220643,0.4602570.997286,],
            [0.196333,0.4847190.989152,],
            [0.183405,0.5073710.979795,],
            [0.178643,0.5288570.968157,],
            [0.176438,0.5499050.952019,],
            [0.168743,0.5702620.935871,],
            [0.154000,0.5902000.921800,],
            [0.146029,0.6091190.907857,],
            [0.138024,0.6276290.897290,],
            [0.124814,0.6459290.888343,],
            [0.111252,0.6635000.876314,],
            [0.095210,0.6798290.859781,],
            [0.068871,0.6947710.839357,],
            [0.029667,0.7081670.816333,],
            [0.003571,0.7202670.791700,],
            [0.006657,0.7312140.766014,],
            [0.043329,0.7410950.739410,],
            [0.096395,0.7500000.712038,],
            [0.140771,0.7584000.684157,],
            [0.171700,0.7669620.655443,],
            [0.193767,0.7757670.625100,],
            [0.216086,0.7843000.592300,],
            [0.246957,0.7917950.556743,],
            [0.290614,0.7972900.518829,],
            [0.340643,0.8008000.478857,],
            [0.390900,0.8028710.435448,],
            [0.445629,0.8024190.390919,],
            [0.504400,0.7993000.348000,],
            [0.561562,0.7942330.304481,],
            [0.617395,0.7876190.261238,],
            [0.671986,0.7792710.222700,],
            [0.724200,0.7698430.191029,],
            [0.773833,0.7598050.164610,],
            [0.820314,0.7498140.153529,],
            [0.863433,0.7406000.159633,],
            [0.903543,0.7330290.177414,],
            [0.939257,0.7287860.209957,],
            [0.972757,0.7297710.239443,],
            [0.995648,0.7433710.237148,],
            [0.996986,0.7658570.219943,],
            [0.995205,0.7892520.202762,],
            [0.989200,0.8135670.188533,],
            [0.978629,0.8386290.176557,],
            [0.967648,0.8639000.164290,],
            [0.961010,0.8890190.153676,],
            [0.959671,0.9134570.142257,],
            [0.962795,0.9373380.126510,],
            [0.969114,0.9606290.106362,],
            [0.976900,0.9839000.080500,],
        ],device='cpu')



def palette(name,device='cuda:0'):
    """
    Returns the color palette with the specified name

    Parameters
    ----------
    name : str
        the name of the color palette
    device : str or torch.device (optional)
        the device the tensor will be stored to (default is 'cuda:0')

    Returns
    -------
    Tensor
        the color tensor

    Raises
    ------
    AssertionError
        if the name is unknown
    """

    color = {
                'black'   : _black,
                'r'       : _r,
                'g'       : _g,
                'b'       : _b,
                'c'       : _c,
                'm'       : _m,
                'y'       : _y,
                'fire'    : _fire,
                'brown'   : _brown,
                'orange'  : _orange,
                'blue'    : _blue,
                'green'   : _green,
                'mint'    : _mint,
                'purple'  : _purple,
                'sign'    : _sign,
                'king'    : _king,
                'vision'  : _vision,
                'turbo'   : _turbo,
                'pinot'   : _pinot,
                'sky'     : _sky,
                'aqua'    : _aqua,
                'dusk'    : _dusk,
                'relay'   : _relay,
                'sweet'   : _sweet,
                'phoenix' : _phoenix,
                'RYB'     : _RYB,
                'scale'   : _scale,
                'paint'   : _paint,
                'pastel'  : _pastel,
                'cinolib' : _cinolib,
                'matlab'  : _matlab,
                'parula'  : _parula,
            }
    if name in color:
        return color[name]().to(device=device)
    assert False, 'Unknown color palette'
